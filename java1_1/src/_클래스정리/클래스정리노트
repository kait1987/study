
=========================== 오리엔테이션 =======================================

- 6달 커리큘럼 -
	1. java 기초문법 
	2. java 고급문법 + UI JAVAFX		[ 포트1 ]	
	3. 프론트엔드[ 디자인 ] : HTML , CSS , JS
	4. 백엔드 [java] JSP			[ 포트2 ]
	5. [java] Spring 			
	6. [java] Spring			[ 포트3 ]

- 수업시간 -
	[ 3시간 ]
	13:00 ~ 13:50
	14:00 ~ 14:50
	15:00 ~ 15:50

- 연락처 - 
	카카오 플러스친구 : 아이티단자 

- 자료 제공 - 
	자료 홈페이지 : 아이티단자

- java 설치 - 
	1. 설치 : 
		1. JDK : 자바 개발 키트 
			1. JDK8 다운로드 
			2. [ ]윈도우 환경에 사용할수 있도록 환경변수  
				1. JAVA_HOME 		C:\jdk1.8.0_281 [ JDK 설치 경로 ]
				2. CLASSPATH		%JAVA_HOME%\lib
				3. path 편집 =>		%JAVA_HOME%\bin
			3. 확인 : 시작 => 검색 => cmd => java -version
		2. 이클립스 : 자바 에디터 

- 이클립스 사용하기 - 
	1. 워크스페이스 [ 작업폴더 ]
		2. java 프로젝트 [ 기본 java 라이브러리 제공 ]
			3. 패키지 [ 프로젝트내 폴더 ]
				4. 클래스 .java


============================= java 이론 =================================

	1. 컴퓨터 언어 : java , python , c ,c# 등
		1. 컴퓨터 구조 책
		2. 알고리즘 책 [ 백준 ]

	2. JAVA 특징 : 객체지향 [ 생활 -----> 컴퓨터 ]
		1. 100% 객체지향 
		2. 유니코드 사용 [ 전세계 공용어 ]
	
		-산업화 되면서 => 자동화, 대량생산 등 중요성이 커짐
	
		-클래스 : 설계도 
		-객체 : 설계도 기반으로 만들어진 제품 
	
			1. 붕어빵 클래스 : 밀가루 , 내용물 등 
			2. 객체 : 서로다른 붕어빵 여러개 생산 
		
			1. 자동차 클래스 : 엔진 , 의자 , 핸들 등 
			2. 객체 : 기아차 , 현대차 , 밴츠 여러개 생산 
		
			1. 회원 클래스 : 아이디 , 비밀번호 , 이메일 등 
			2. 객체 : 여러명의 회원들 
		
	
	3. 컴퓨터 [ 0 , 1 ] 기계어 <------- 아스키코드[번역]-------- 미국어 
			10000001									a
			10000002									b
	
	4. 코드 입력시 규칙 
		1. 클래스 안에 코드 작성 
		2. main 메소드 안에 있는 코드만 실행 가능 
		3. { : 시작  } : 끝	
		4. 클래스 , 메소드 등 을 제외한 코드 끝에 ; [ 세미콜론 ] : 일처리 
		5. 클래스내 멤버에 접근할때 .
			// 클래스명.멤버이름
		6. 키워드[미리 만들어진 단어 ] 제외 하고는 모든 문자에는 " " 처리 
		7. 숫자는 " " 처리 X
		8. CTRL+스페이바 : 자동완성 
		9. run [ ctrl+f11 ] 
		
	5. 컴파일 
	
	
	6. 메모리 [ 저장 장치 ] : 데이터 저장하는 공간 
		1. 변수 -> 메모리 할당받아 저장하는 공간 
			1. 변수 <--> 상수 
			2. 자료형[클래스] 사용  => new 생략 
			
		2. 객체 -> 메모리 할당받아 저장하는 공간 
			1. 클래스 기반으로 만들어진 메모리 할당 => new
			
	7. 용량단위 : 
		0 , 1 : 1비트  => 8비트 => 1바이트 [ byte ]
					 	01010101
	
	
		
=================================================================================
	[ 클래스 정리 ]
	
	1. System 클래스  : 전반적인 시스템 클래스 제공 
		1. System.out : 출력 
			1. println( ) : 자동 줄바꿈
			2. print( ) : 자동 줄바꿈X
			3. prinf( "형식문자" , 데이터 ) : 형식[꾸미기]
		
		2. System.in : 입력장치 : 키보드 

	2. Scanner 클래스  : 입력 클래스 
		1. nextInt() : 입력객체로 부터 정수형 받아오기 
		2. next() :  입력객체로 부터 문자열 받아오기 
		
	3. String 클래스 : 문자열 클래스 
		1. new 생략 가능 
		2. .equals() 비교 메소드  
		
	4. Random 클래스 : 난수 클래스
		1. .nextInt( 수 ) : 0 ~ (수 -1) 앞자리의 난수(정수) 발생
		2. .nestInt( 수 ) +시작값 ;시작값 ~ 수 까지의 난수(정수) 발생	
	

///////////////////////////////////////////////////////////////////
		[  java 문법 ]
	
	2. 형식 문자 
		1. %d : 정수 들어가는 자리 
		2. %s : 문자열 들어가는 자리 
		
	3. 제어 문자 
		1. \n : 줄바꿈
		2. \t : 들여쓰기 
		
	4. 변수의 자료형 : 미리 만들어진 상자 크키 ====> 메모리 효율적 => 용량 줄이기 => 속도 증가 
		1. boolean : 1비트  	논리형
		2. char : 2바이트 	문자형
			// * 문자열은 String 클래스 사용 
		3. byte : 1바이트 	정수형
		4. short : 2바이트 	정수형
		5. int : 4바이트 		정수형	[ java 기본 자료형 ]  
		6. long : 8바이트 	정수형 
			// * 데이터뒤에 L 넣어주기 
		7. float : 4바이트 	실수형 
			// * 데이터뒤에 f 넣어주기 	
		8. double : 8바이트 	실수형 	[ java 기본 자료형 ]  
	
	5. 형 변환 
		1. 작은 용량 -> 큰 용량 변환 가능 
		2. 큰 용량에서 작은 용량 변환 불가능 
		3. 강제 형변환 : 큰 용량 => 작은 용량 강제로 변환 
			//  변수명 앞에 ( 변경할 자료형/클래스명 )
				//  int 정수 = (int) long형변수 
				
				
	6. 연산자 : 연산시 사용되는 특수문자 [ 두개 이상 연산자 있을경우 우선순위 ]
		1. 산술연산자 => 결과 : 값
			+더하기 -빼기 *곱하기 /나누기 %나머지
			
		2. 대입연산자 
			= [ 대입 : 오른쪽값이 왼쪽에 대입 ]
			+= [ 오른쪽값을 왼쪽값에 더한후 왼쪽값에 대입 ]
				변수 += 1			///		변수 = 변수 + 1 
			*=	/=	%=	-=
			
		3. 비교연산자 => 결과 : T(1) / F(0)
			> 초과	>= 이상	== 같다 [ String 객체 사용 불가 ]
			< 미만	<= 이하	!= 같지않다 [ 아니다 ]
	
		4. 논리연산자 [ 2개 이상의 비교연산자 사용시 ]
			&& : and[ 이면서 면서 이고 그리고 모두 ]
				변수1 >= 10 && 변수2 >= 30		비교연산자가 모두 T => T
				
			|| : or[ 이거나 거나 하나라도 또는 ]
			 	변수1 >= 10 || 변수2 >= 30		비교연산자가 하나라도 T => T
			 	
			! : not [ T => F ]
				!변수1>=10	T=>F 
		
		5. 증감연산자 [ 순차적인 증가/감소 ]
			++변수	: 선위 1증가	[ 해당 코드줄에서 우선 처리 ]
			변수++	: 후위 1증가	[ 해당 코드줄에서 마지막에 처리 ]
			--변수	: 선위 1감소
			변수--	: 후위 1감소 
			
		
		
		6. 제어문 = 1.제어/판단 2.T/F => 원하는 값으로 출력  
			* 주의할 점 : 변수는 괄호 안으로 들어갈 수 있음 => 괄호 밖으로 나올수 없음
					1. 괄호{} 안에서 선언된 {}안에서만 사용
			*if (논리) ; (X)
			*if (논리) {실행코드} ;(X)	
			
			
			// 1. if
			
				1. if( 논리 t/f ) T=>실행코드 
				2. if( 논리 t/f ) {
						실행코드1;
						실행코드2;
					}
				3. if( 논리 t/f ) {
						T => 실행코드 
					}
					else{
						F => 실행코드 
					}
				4. if( 논리 t/f ) {
						T => 실행코드 
					}
					else if( 논리2 t/f ) {
						T => 실행코드 
					}
					else if( 논리3 t/f ) {
						T => 실행코드 
					}
					else {
						F => 실행코드 
					}
				5. if( 논리1 t/f ) 
				   if( 논리2 t/f ) 
				   if( 논리3 t/f ) 
				   if( 논리4 t/f ) 
				   
			// 2. switch(key)
		
